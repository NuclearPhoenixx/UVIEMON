config ARCH
	string
	option env="ARCH"

config KERNELVERSION
	string
	option env="KERNELVERSION"



menu "General Setup"

config SMP_CPUS_MAX
	int "Number of supported CPUs"
	default 2
	range 0 16
	help
	 Set maximum number of CPUs supported at runtime. Note that this
	 configures the upper limit, if the number of CPUs present in a system
	 is smaller or larger than this number, either the former or the latter
	 will determine the actual number of CPUs used at runtime.

config STACK_SIZE
	int "Stack size per thread"
	default 4096
	range 1024 32768
	help
	 Set the stack size allocated to a thread at runtime. It's probably
	 wise to set this to a radix-2.

config KALLSYMS
	bool "Generate a kernel symbol table"
	default y
	help
	  Create a kernel image symbol lookup table for use in loadable modules.
	  Note: If disabled, modules can still export symbols for other modules
	  to use, but no kernel functions will be resolvable.
	  If unsure, say Y.


config CROSS_PLATFORM_TARGET
	bool "Cross-compile for different platform"
	default y
	help
	 Compile for different target platform.

config CROSS_COMPILE
	string "Cross-compiler tool prefix"
	default "" if !CROSS_PLATFORM_TARGET
	default "sparc-elf-" if CROSS_PLATFORM_TARGET
	help
	  Same as running 'make CROSS_COMPILE=prefix-' but stored for
	  default make runs in this kernel build directory.  You don't
	  need to set this unless you want the configured kernel build
	  directory to select the cross-compiler automatically.

choice
	prompt "Boot/Startup code"
	default TARGET_COMPILER_BOOT_CODE

config TARGET_COMPILER_BOOT_CODE
	bool "Use target compiler's boot/startup code"
	help
	  Use the compiler-provided boot code (e.g. with BCC)

config ARCH_CUSTOM_BOOT_CODE
	bool "Use architecture's boot/startup code"
	help
	  Use the architecture-provided boot code

endchoice # "Boot/Startup code


endmenu # "General Setup"


menuconfig MODULES
	bool "Enable loadable module support"
	depends on AR
	option modules
	help
	  Kernel modules are small pieces of compiled code which can
	  be inserted in the running kernel, rather than being
	  permanently built into the kernel.  You use the "modprobe"
	  tool to add (and sometimes remove) them.  If you say Y here,
	  many parts of the kernel can be built as modules (by
	  answering M instead of Y where indicated): this is most
	  useful for infrequently used options which are not required
	  for booting.  For more information, see the man pages for
	  modprobe, lsmod, modinfo, insmod and rmmod.

	  If you say Y here, you will need to run "make
	  modules_install" to put the modules under /lib/modules/
	  where modprobe can find them (you may need to be root to do
	  this).

	  If unsure, say Y.

if MODULES

config EMBED_MODULES_IMAGE
	bool "Embed an image with all generated loadable modules"
	help
	  Enable this option in order to embed an image containing all
	  generated modules into the final kernel binary.
	  This is a convenience option, if unsure, say Y.

config EMBED_APPLICATION
	string "Embed an application image"
	depends on EMBED_MODULES_IMAGE
	default ""
	help
	  Specify a path to an executable to embed or leave it empty.
	  Note: in the current implementation, the executable is treated as a
	  kernel module, so it requires to be relocatible and have a init/exit
	  call.

endif # MODULES


config BUILD_XEN_KERNELS
	bool "Build Xentium DSP kernel programs"
	help
	  Enable this option in order to build the Xentium kernel programs
	  in dsp/xentium.

config XENTIUM_PROC_DEMO
	bool "Build a Xentium Processing Demo kernel"
	depends on BUILD_XEN_KERNELS && XENTIUM
	help
	  Enable this option in order to build a kernel that runs a Xentium
	  processing demo.


menu "Compile-time checks and compiler options"

choice
	prompt "Compiler optimization level"
	default CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE

config CC_OPTIMIZE_FOR_PERFORMANCE
	bool "Optimize for performance"
	help
	  This is the default optimization level for the kernel, building
	  with the "-O2" compiler flag for best performance and most
	  helpful compile-time warnings.

config CC_OPTIMIZE_FOR_SIZE
	bool "Optimize for size"
	help
	  Enabling this option will pass "-Os" instead of "-O2" to
	  your compiler resulting in a smaller kernel.

	  If unsure, say N.

config CC_OPTIMIZE_NONE
	bool "No optimization"
	help
	  Enabling this option will pass "-O0" to the compiler.
	  This should be avoided, some things may not work as expected or at
	  all if the rely on -O2 or -Os. You have been warned.

	  If unsure, say N.

endchoice

config DEBUG_INFO
	bool "Compile the application with debug info"
	help
          If you say Y here the resulting application binary will include
	  debugging info resulting in a larger application binary.
	  This adds debug symbols to the application (gcc -g), and
	  is needed if you want to debug your application with gdb.
	  Say Y here only if you plan to debug the application.

	  If unsure, say N.

config DEBUG_INFO_REDUCED
	bool "Reduce debugging information"
	depends on DEBUG_INFO
	help
	  If you say Y here gcc is instructed to generate less debugging
	  information for structure types. This means that tools that
	  need full debugging information (like gdb or systemtap) won't
	  be happy. But if you merely need debugging information to
	  resolve line numbers there is no loss. Advantage is that
	  build directory object sizes shrink dramatically over a full
	  DEBUG_INFO build and compile times are reduced too.
	  Only works with newer gcc versions.


endmenu
